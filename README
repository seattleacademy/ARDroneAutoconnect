
# Setting up a drone for environment (https://github.com/rfolk/DroneFleet):

Assumption is drones are brand-new:
3. cd src/data/ (Keep this directory open during the rest of these instructions)
4. Open install.sh (Change to the following)

  a. ESSID=saasdrones  
  b. IP=192.168.1.2  
  c. NETMASK=255.255.255.0   

5. Save install.sh
6. Turn on Drone
7. Connect to Drone Access Point with a wireless-capable computer.

```
> denotes a command in a terminal or telnet capable program. 
> telnet 192.168.1.1    (No password required)
> vi install.sh
Copy and paste the install.sh on our local machine to vi
> vi ARAutoConnect.sh
Copy and paste the ARAutoConnect.sh on our local machine to vi
> vi uninstall.sh
Copy and paste the uninstall.sh
> chmod 0755 install.sh
> chmod 0755 ARAut	oConnect.sh
> chmod 0755 uninstall.sh
> ./install.sh
> vi /data/config.ini
Set “wifi_mode = 1”
> reboot (Disconnection should occur and will then join ESSID once finished)
```

*** Part I : ARAutoConnect.sh ***

The actual script can be found in src/data/ARAutoConnect.sh. Here is a short description of what the script does :

    - When you boot the drone nothing is modified, it will create an ad-hoc WiFi network and wait for a connection.
At this point you can connect to the drone with your computer or an iPhone in the standard way.

    - Every 10 seconds the script will check if there is a device connected to the drone's ad-hoc network by pinging the default 
addresses.
       - If there is no ad-hoc connection, the script will then check all available networks, looking for a specified Access Point.
           - If the Access Point is found, the script will change the drone's wifi configuration and connect to it.

    - As long as the Access Point is available, the drone will remain connected and if the network is lost (for instance out of range)
it will automatically try to reconnect.

    - If the Access Point has been unavailable for more than 30 seconds, the script then automatically switch the WiFi configuration 
back to the standard ad-hoc network. At which point you can reconnect to the drone with an iPhone or your computer as if nothing had
ever happened !

********************************** BE CAREFUL ***********************************************
* If you try to modify the drone's on-board system by yourself be sure to know exactly what *
* you are doing. If you modify /bin/wifi_setup.sh your drone may loose WiFi capability, in  *
* which case you are majorly S.O.L							    *
*********************************************************************************************

For a standard installation, ARAutoConnect.sh has to be put in /home/default/ARAutoConnect along with three configuration files : essid,
netmask and ip : 
    - essid contains the ESSID of the WiFi Access Point the drone will try to connect to
    - ip contains the static ip address that the drone will use when connecting to the Access Point
    - netmask contains the netmask that the drone will use when connecting to the Access Point

(These files are read once at the beginning of the script, any modification of their value won't take effect until the script is
restarted.)

In order to be launched once the AR.Drone's WiFi network is properly configured, a line has to be appended to /bin/wifi_setup.sh :
    /home/default/ARAutoConnect/ARAutoConnect.sh &

To uninstall the script, just delete /home/default/ARAutoConnect and remove the last line of /bin/wifi_setup.sh

